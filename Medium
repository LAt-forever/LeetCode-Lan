##两数相加
给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。

请你将两个数相加，并以相同形式返回一个表示和的链表。

你可以假设除了数字 0 之外，这两个数都不会以 0 开头。


  ###解法一
  1、把两个链表分别转成整数（注意原始链表是倒序的）
  2、相加
  3、把相加的结果再转成新的链表（也是倒序）

  # Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        n = l1
        i = 1
        num_l1 = 0
        while n:#遍历l1 获得l1中的所有值
            num_l1 = num_l1 + n.val * i 
            i = i * 10
            n = n.next

        m = l2
        j = 1
        num_l2 = 0
        while m:#遍历l2 获得l2中的所有值
            num_l2 = num_l2 + m.val * j
            j = j * 10
            m = m.next

        str_num = str(num_l1 + num_l2)#将两个整数相加 转换成字符串
        str_num = str_num[::-1]#反转操作

        res = list_result = ListNode(0)#创建一个新链表 空的头指针res 用list_result对链表进行操作

        for s in str_num:
            list_result.next = ListNode(int(s))#
            list_result = list_result.next
        return res.next 
